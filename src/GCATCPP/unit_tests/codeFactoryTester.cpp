//
// Created by Martin on 2/15/2019.
//


#include "test_utils.cpp"

#include "../codes/CodeFactory.h"
#include "../graph/Graph.h"
#include <memory>

TEST(CodeFactoryTester, WrongRule) {
    std::vector<std::string> c_str = {"11011 11000"};
    std::shared_ptr<AbstractCode> code = CodeFactory::rFactor(c_str);
    auto seq_str = code->as_vector();
    test_help::test_equal_vector(seq_str, {"11000", "11011"});

    c_str = {"123 213"};
    code = CodeFactory::rFactor(c_str);
    EXPECT_TRUE(code->is_circular());

    c_str = {"123 213"};
    code = CodeFactory::rFactor(c_str);
    graph::Graph g(*code);
    auto edges = g.get_edges();
    EXPECT_EQ(edges.size(), 4);

    c_str = {
};

    code = CodeFactory::rFactor(c_str);
    EXPECT_FALSE(code->is_circular());

    c_str = {"12â‚¬ .13"};
    EXPECT_ANY_THROW(CodeFactory::rFactor(c_str)->test_code());

/*
    std::vector<std::string> c = {"11011", "11000"};
    code = CodeFactory::factor(c);
    EXPECT_TRUE(code->is_circular());

    c = {"110101", "11000"};
    code = CodeFactory::factor(c);
    EXPECT_FALSE(code->test_code());

    c_str = "1101011000";
    code = CodeFactory::factor(c_str, (unsigned)5);
    EXPECT_TRUE(code->is_circular());

*/
}