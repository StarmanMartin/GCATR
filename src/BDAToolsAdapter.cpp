#include <Rcpp.h>
#include <memory>

#include "RAdapterUtils.h"

#include "GCATCPP/bda/BDATools.h"
#include "GCATCPP/codes/StdGenCode.h"
#include "GCATCPP/interfaces/AbstractTupleContainer.h"



using namespace Rcpp;


BDA::BDATools* main_bda_ptr = (BDA::BDATools*) NULL;


//' Add a binary dichotomic algorithm (BDA).
//' 
//' Each added binary dichotomic algorithm (BDA) results one binary digit for each codon.
//' You can add multiple BDAs for one procedure. To add a rule, you need to start a BDA procedure first.
//' To do so you can either call \link{code_start_bda} or to start a procedure
//' for all RNA codons call \link{start_bda}.
//' To add a BDA simply Call \link{add_bda}. To execute the BDAs call \link{run_bda}.
//' A binary dichotomic algorithm generates a binary representation of a generic code. For more info on BDAs read:\cr
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic  Code generated by Binary Dichotomic Algorithms}
//'
//' @seealso [start_bda()] for all codons,
//'           [code_start_bda()] for code, [run_bda()] for executing and run the BDAs
//'
//' @param i_1 A unsigend Integer from 1 - [WORD LENGTH]
//' @param i_2 A unsigend Integer from 1 - [WORD LENGTH]
//' @param Q_11 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @param Q_12 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @param Q_21 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @param Q_22 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @return Boolean value. True if the rules parameters are correct
//' @examples
//' code_start_bda(c("ACG", "CAG"))
//' add_bda(1, 2, "C", "G", "A", "T")
//' res.binary <- run_bda()
//' 
//' @export 
// [[Rcpp::export]]
bool add_bda(int i_1, int i_2, std::string Q_11, std::string Q_12, std::string Q_21, std::string Q_22) {
  if(main_bda_ptr == NULL) {
    Rcpp::Rcerr << "Run BDA constructer for code first: " << " code_start_bda(StringVector) " << "\n";
    return false;
  }
  
  if(Q_11.length() != 1 || Q_12.length()!= 1 || Q_21.length()!= 1 || Q_22.length()!= 1) {
    Rcpp::Rcerr << "Q_11, Q_12, Q_21, Q_22 have to be a single letter: " << "A, C, G, T, U" << "\n";
    return false;
  }
  
  auto return_val = main_bda_ptr->add_rule((unsigned)i_1, (unsigned)i_2, Q_11[0], Q_12[0], Q_21[0], Q_22[0]);
  main_bda_ptr->print_errors();
  return return_val;
}

bool _strat_bda(std::shared_ptr<AbstractTupleContainer> a) {
  
  if(main_bda_ptr != NULL) {
    delete main_bda_ptr;
  }
  
  main_bda_ptr = new BDA::BDATools(a);
  
  return true;
}

//' Start a BDA procedure for a code.
//' 
//' Each added binary dichotomic algorithm (BDA) results one binary digit for each codon.
//' You can add multiple BDAs for one procedure. To add a rule, you need to start a BDA procedure first.
//' To do so you can either call \link{code_start_bda} or to start a procedure
//' for all RNA codons call \link{start_bda}.
//' To add a BDA simply Call \link{add_bda}. To execute the BDAs call \link{run_bda}.
//' A binary dichotomic algorithm generates a binary representation of a generic code. For more info on BDAs read:\cr
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic  Code generated by Binary Dichotomic Algorithms}
//'
//' @seealso [start_bda()] for all codons, [add_bda] add a BDA,
//'           [run_bda()] for executing and run the BDAs
//'
//' @param code is either a string vector or a string. It can be a DNA or RNA sequence.
//' @param tuple_length if code is a sequence, length is the tuple length of the code.
//' @return Boolean value. True if the procedure has started
//' @examples
//' code_start_bda(c("ACG", "CAG"))
//' code_start_bda("ACG CAG")
//' code_start_bda("ACGCAG", tuple_length=3)
//' add_bda(1, 2, "C", "G", "A", "T")
//' res.binary <- run_bda()
//' 
//' @export
// [[Rcpp::export]]
bool code_start_bda(StringVector code, int tuple_length = -55555) {
  auto code_vec = RAdapterUtils::as_cpp_string_vector(code);
  auto a = RAdapterUtils::factorCodeWrapper(code_vec, tuple_length);
  
  if(!a->test_code()) {
    a->print_errors();
    return false;
  }
  
  return _strat_bda(a);
}

//' Execute BDA procedure.
//' 
//' This function executes the currently open binary dichotomic algorithm (BDA) procedure. Therefore, you need to start a BDA procedure.
//' You can call \link{code_start_bda} to start a procedure
//' for all codons call \link{start_bda}.
//' To add a BDA simply Call \link{add_bda}.
//' A binary dichotomic algorithm generates a binary representation of a generic code. For more info on BDAs read:\cr
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic  Code generated by Binary Dichotomic Algorithms}
//' 
//' @return A List. A binary representation of the Code.
//' @examples
//' code_start_bda(c("ACG", "CAG"))
//' add_bda(1, 2, "C", "G", "A", "T")
//' add_bda(1, 3, "A", "G", "C", "T")
//' res.binary <- run_bda()
//'
//' @seealso  [start_bda()] for all codons, [add_bda] add a BDA,
//'           [code_start_bda()] for code
//'
//' @export 
// [[Rcpp::export]]
List run_bda() {
  
  if(main_bda_ptr == NULL) {
    Rcpp::Rcerr << "Run BDA constructer for code first: " << " code_start_bda(StringVector) " << "\n";
    return {};
  }
  
  auto return_val = RAdapterUtils::as_r_string_vector(main_bda_ptr->run_bda_for_code());
  main_bda_ptr->print_errors();

  return Rcpp::List::create(Rcpp::Named("code") = main_bda_ptr->get_code()->get_tuples(),
                              Rcpp::Named("bda") = return_val);
}


//' Execute BDA procedure for all codons.
//' 
//' This function executes the currently open binary dichotomic algorithm (BDA) procedure. Therefore, you need to start a BDA procedure.
//' You can call \link{code_start_bda} to start a procedure
//' for all codons call \link{start_bda}.
//' To add a BDA simply Call \link{add_bda}.
//' A binary dichotomic algorithm generates a binary representation of a generic code. For more info on BDAs read:\cr
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic  Code generated by Binary Dichotomic Algorithms}
//' 
//' @return A List. A binary representation of the Code.
//' @examples
//' code_start_bda(c("ACG", "CAG"))
//' add_bda(1, 2, "C", "G", "A", "T")
//' add_bda(1, 3, "A", "G", "C", "T")
//' res.binary <- run_bda_for_all_codons()
//'
//' @seealso  [start_bda()] for all codons, [add_bda] add a BDA,
//'           [code_start_bda()] for code
//'
//' @export 
// [[Rcpp::export]]
List run_bda_for_all_rna_codons() {
  
  if(main_bda_ptr == NULL) {
    Rcpp::Rcerr << "Run BDA constructer for code first: " << " code_start_bda(StringVector) " << "\n";
    return {};
  }
  
  auto return_val = RAdapterUtils::as_r_string_vector(main_bda_ptr->run_bda_for_all_rna_codons());
  main_bda_ptr->print_errors();

  return Rcpp::List::create(Rcpp::Named("code") = main_bda_ptr->get_all_rna_codons(),
                              Rcpp::Named("bda") = return_val);
}