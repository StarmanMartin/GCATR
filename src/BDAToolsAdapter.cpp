#include <Rcpp.h>
#include <memory>

#include "RAdapterUtils.h"

#include "GCATCPP/bda/BDATools.h"
#include "GCATCPP/codes/StdGenCode.h"
using namespace Rcpp;

// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp 
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//

BDA::BDATools* main_bda_ptr = (BDA::BDATools*) NULL;


//' Add a BDA rule.
//' 
//' A BDA rule defines one step of a binary dichotomic algorithm. To add a rule, you need to start a BDA procedure first.
//' Call \code{\link{code_start_bda}} to start a BDA procedure.
//' For more info on BDAs read:
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Str√ºngmann. On Models of the Genetic Code generated by Binary Dichotomic Algorithms}
//'
//' @param i_1 A unsigend Integer from 1 - [WORD LENGTH]
//' @param i_2 A unsigend Integer from 1 - [WORD LENGTH]
//' @param Q_11 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @param Q_12 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @param Q_21 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @param Q_22 A single character. Has to be one of \{'A', 'C', 'G', 'T', 'U'\}
//' @return Boolean value. True if the rules parameter are correct
//' @examples
//' code_start_bda(c("ACG", "CAG"))
//' add_bda_rule(1, 2, "C", "G", "A", "T")
//' res.binary <- run_bda()
//' 
//' @export 
// [[Rcpp::export]]
bool add_bda_rule(int i_1, int i_2, std::string Q_11, std::string Q_12, std::string Q_21, std::string Q_22) {
  if(main_bda_ptr == NULL) {
    Rcpp::Rcerr << "Run BDA constructer for code first: " << " code_start_bda(StringVector) " << "\n";
    return false;
  }
  
  if(Q_11.length() != 1 || Q_12.length()!= 1 || Q_21.length()!= 1 || Q_22.length()!= 1) {
    Rcpp::Rcerr << "Q_11, Q_12, Q_21, Q_22 have to be a single letter: " << "A, C, G, T, U" << "\n";
    return false;
  }
  
  auto return_val = main_bda_ptr->add_rule((unsigned)i_1, (unsigned)i_2, Q_11[0], Q_12[0], Q_21[0], Q_22[0]);
  main_bda_ptr->print_errors();
  return return_val;
}

bool _strat_bda(std::shared_ptr<StdGenCode> a) {
  if(!a->test_code()) {
    return false;
  }
  
  if(main_bda_ptr != NULL) {
    delete main_bda_ptr;
  }
  
  a->print_errors();
  
  main_bda_ptr = new BDA::BDATools(a);
  
  return true;
}

//' Start a BDA procedure.
//' 
//' A binary dichotomic algorithm generates a binary representation of a generic code. To add a rule simply Call \code{\link{add_bda_rule}}.
//' For more info on BDAs read:
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic Code generated by Binary Dichotomic Algorithms}
//'
//' @param code A vertor with codons.
//' @return Boolean value. True if the procedure has started
//' @examples
//' code_start_bda(c("ACG", "CAG"))
//' add_bda_rule(1, 2, "C", "G", "A", "T")
//' res.binary <- run_bda()
//' 
//' @export 
// [[Rcpp::export]]
bool code_start_bda(StringVector code) {
  auto a = std::make_shared<StdGenCode>(RAdapterUtils::as_cpp_string_vector(code));
  return _strat_bda(a);
}

//' Start a BDA procedure.
//' 
//' A binary dichotomic algorithm generates a binary representation of a generic code. To add a rule simply Call \code{\link{add_bda_rule}}.
//' For more info on BDAs read:
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic Code generated by Binary Dichotomic Algorithms}
//'
//' @param seq A gene sequence.
//' @param word_lenth length of the codons.
//' @return Boolean value. True if the procedure has started
//' @examples
//' seq_start_bda("ACGCAG", 3)
//' add_bda_rule(1, 2, "C", "G", "A", "T")
//' res.binary <- run_bda()
//' 
//' @export 
// [[Rcpp::export]]
bool seq_start_bda(std::string seq, int word_lenth) {
  auto a = std::make_shared<StdGenCode>(seq, word_lenth);
  return _strat_bda(a);
}

//' Execute BDA procedure.
//' 
//' Run the currently running BDA procedure. Therefore, you need to start a BDA procedure. 
//' You can call \code{\link{code_start_bda}} or \code{\link{seq_start_bda}} to start the procedure for a code. 
//' To add a rule simply Call \code{\link{add_bda_rule}}.
//' A binary dichotomic algorithm generates a binary representation of a generic code. For more info on BDAs read:
//' \emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic  Code generated by Binary Dichotomic Algorithms}
//' 
//' @return A StringVector. A binary representation of the Code.
//' @examples
//' code_start_bda(c("ACG", "CAG"))
//' add_bda_rule(1, 2, "C", "G", "A", "T")
//' res.binary <- run_bda()
//' 
//' @export 
// [[Rcpp::export]]
StringVector run_bda() {
  
  if(main_bda_ptr == NULL) {
    Rcpp::Rcerr << "Run BDA constructer for code first: " << " code_start_bda(StringVector) " << "\n";
    return {};
  }
  
  auto return_val = RAdapterUtils::as_r_string_vector(main_bda_ptr->run_bda_for_code());
  main_bda_ptr->print_errors();
  return return_val;
}