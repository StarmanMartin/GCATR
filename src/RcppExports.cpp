// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// add_bda_rule
bool add_bda_rule(int i_1, int i_2, std::string Q_11, std::string Q_12, std::string Q_21, std::string Q_22);
RcppExport SEXP _GCATR_add_bda_rule(SEXP i_1SEXP, SEXP i_2SEXP, SEXP Q_11SEXP, SEXP Q_12SEXP, SEXP Q_21SEXP, SEXP Q_22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i_1(i_1SEXP);
    Rcpp::traits::input_parameter< int >::type i_2(i_2SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_11(Q_11SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_12(Q_12SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_21(Q_21SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_22(Q_22SEXP);
    rcpp_result_gen = Rcpp::wrap(add_bda_rule(i_1, i_2, Q_11, Q_12, Q_21, Q_22));
    return rcpp_result_gen;
END_RCPP
}
// start_bda_for_code
bool start_bda_for_code(StringVector code);
RcppExport SEXP _GCATR_start_bda_for_code(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(start_bda_for_code(code));
    return rcpp_result_gen;
END_RCPP
}
// run_bda
StringVector run_bda();
RcppExport SEXP _GCATR_run_bda() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(run_bda());
    return rcpp_result_gen;
END_RCPP
}
// check_if_circular
bool check_if_circular(StringVector code);
RcppExport SEXP _GCATR_check_if_circular(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(check_if_circular(code));
    return rcpp_result_gen;
END_RCPP
}
// check_if_cn_circular
bool check_if_cn_circular(StringVector code);
RcppExport SEXP _GCATR_check_if_cn_circular(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(check_if_cn_circular(code));
    return rcpp_result_gen;
END_RCPP
}
// check_if_comma_free
bool check_if_comma_free(StringVector code);
RcppExport SEXP _GCATR_check_if_comma_free(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(check_if_comma_free(code));
    return rcpp_result_gen;
END_RCPP
}
// check_if_self_complementary
bool check_if_self_complementary(StringVector code);
RcppExport SEXP _GCATR_check_if_self_complementary(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(check_if_self_complementary(code));
    return rcpp_result_gen;
END_RCPP
}
// get_acid
StringVector get_acid(StringVector code);
RcppExport SEXP _GCATR_get_acid(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_acid(code));
    return rcpp_result_gen;
END_RCPP
}
// get_one_logest_path_as_vector
StringVector get_one_logest_path_as_vector(StringVector code);
RcppExport SEXP _GCATR_get_one_logest_path_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_one_logest_path_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}
// get_all_logest_path_as_vector
Rcpp::List get_all_logest_path_as_vector(StringVector code);
RcppExport SEXP _GCATR_get_all_logest_path_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_all_logest_path_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}
// get_one_circle_as_vector
StringVector get_one_circle_as_vector(StringVector code);
RcppExport SEXP _GCATR_get_one_circle_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_one_circle_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}
// get_all_circle_as_vector
Rcpp::List get_all_circle_as_vector(StringVector code);
RcppExport SEXP _GCATR_get_all_circle_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_all_circle_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GCATR_add_bda_rule", (DL_FUNC) &_GCATR_add_bda_rule, 6},
    {"_GCATR_start_bda_for_code", (DL_FUNC) &_GCATR_start_bda_for_code, 1},
    {"_GCATR_run_bda", (DL_FUNC) &_GCATR_run_bda, 0},
    {"_GCATR_check_if_circular", (DL_FUNC) &_GCATR_check_if_circular, 1},
    {"_GCATR_check_if_cn_circular", (DL_FUNC) &_GCATR_check_if_cn_circular, 1},
    {"_GCATR_check_if_comma_free", (DL_FUNC) &_GCATR_check_if_comma_free, 1},
    {"_GCATR_check_if_self_complementary", (DL_FUNC) &_GCATR_check_if_self_complementary, 1},
    {"_GCATR_get_acid", (DL_FUNC) &_GCATR_get_acid, 1},
    {"_GCATR_get_one_logest_path_as_vector", (DL_FUNC) &_GCATR_get_one_logest_path_as_vector, 1},
    {"_GCATR_get_all_logest_path_as_vector", (DL_FUNC) &_GCATR_get_all_logest_path_as_vector, 1},
    {"_GCATR_get_one_circle_as_vector", (DL_FUNC) &_GCATR_get_one_circle_as_vector, 1},
    {"_GCATR_get_all_circle_as_vector", (DL_FUNC) &_GCATR_get_all_circle_as_vector, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_GCATR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
