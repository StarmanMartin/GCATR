// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// add_bda
bool add_bda(int i_1, int i_2, std::string Q_11, std::string Q_12, std::string Q_21, std::string Q_22);
RcppExport SEXP _GCATR_add_bda(SEXP i_1SEXP, SEXP i_2SEXP, SEXP Q_11SEXP, SEXP Q_12SEXP, SEXP Q_21SEXP, SEXP Q_22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i_1(i_1SEXP);
    Rcpp::traits::input_parameter< int >::type i_2(i_2SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_11(Q_11SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_12(Q_12SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_21(Q_21SEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_22(Q_22SEXP);
    rcpp_result_gen = Rcpp::wrap(add_bda(i_1, i_2, Q_11, Q_12, Q_21, Q_22));
    return rcpp_result_gen;
END_RCPP
}
// code_start_bda
bool code_start_bda(StringVector code);
RcppExport SEXP _GCATR_code_start_bda(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_start_bda(code));
    return rcpp_result_gen;
END_RCPP
}
// seq_start_bda
bool seq_start_bda(std::string seq, int word_length);
RcppExport SEXP _GCATR_seq_start_bda(SEXP seqSEXP, SEXP word_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type word_length(word_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_start_bda(seq, word_length));
    return rcpp_result_gen;
END_RCPP
}
// run_bda
List run_bda();
RcppExport SEXP _GCATR_run_bda() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(run_bda());
    return rcpp_result_gen;
END_RCPP
}
// get_average_conductance_of_code
double get_average_conductance_of_code(std::string codeName, std::string acid);
RcppExport SEXP _GCATR_get_average_conductance_of_code(SEXP codeNameSEXP, SEXP acidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type codeName(codeNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type acid(acidSEXP);
    rcpp_result_gen = Rcpp::wrap(get_average_conductance_of_code(codeName, acid));
    return rcpp_result_gen;
END_RCPP
}
// get_max_conductance_of_code
double get_max_conductance_of_code(std::string codeName, std::string acid);
RcppExport SEXP _GCATR_get_max_conductance_of_code(SEXP codeNameSEXP, SEXP acidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type codeName(codeNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type acid(acidSEXP);
    rcpp_result_gen = Rcpp::wrap(get_max_conductance_of_code(codeName, acid));
    return rcpp_result_gen;
END_RCPP
}
// get_min_conductance_of_code
double get_min_conductance_of_code(std::string codeName, std::string acid);
RcppExport SEXP _GCATR_get_min_conductance_of_code(SEXP codeNameSEXP, SEXP acidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type codeName(codeNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type acid(acidSEXP);
    rcpp_result_gen = Rcpp::wrap(get_min_conductance_of_code(codeName, acid));
    return rcpp_result_gen;
END_RCPP
}
// get_average_conductance_of_codeidx
double get_average_conductance_of_codeidx(int codeIdx, std::string acid);
RcppExport SEXP _GCATR_get_average_conductance_of_codeidx(SEXP codeIdxSEXP, SEXP acidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type codeIdx(codeIdxSEXP);
    Rcpp::traits::input_parameter< std::string >::type acid(acidSEXP);
    rcpp_result_gen = Rcpp::wrap(get_average_conductance_of_codeidx(codeIdx, acid));
    return rcpp_result_gen;
END_RCPP
}
// get_max_conductance_of_codeidx
double get_max_conductance_of_codeidx(int codeIdx, std::string acid);
RcppExport SEXP _GCATR_get_max_conductance_of_codeidx(SEXP codeIdxSEXP, SEXP acidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type codeIdx(codeIdxSEXP);
    Rcpp::traits::input_parameter< std::string >::type acid(acidSEXP);
    rcpp_result_gen = Rcpp::wrap(get_max_conductance_of_codeidx(codeIdx, acid));
    return rcpp_result_gen;
END_RCPP
}
// get_min_conductance_of_codeidx
double get_min_conductance_of_codeidx(int codeIdx, std::string acid);
RcppExport SEXP _GCATR_get_min_conductance_of_codeidx(SEXP codeIdxSEXP, SEXP acidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type codeIdx(codeIdxSEXP);
    Rcpp::traits::input_parameter< std::string >::type acid(acidSEXP);
    rcpp_result_gen = Rcpp::wrap(get_min_conductance_of_codeidx(codeIdx, acid));
    return rcpp_result_gen;
END_RCPP
}
// print_all_translation_table
void print_all_translation_table();
RcppExport SEXP _GCATR_print_all_translation_table() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    print_all_translation_table();
    return R_NilValue;
END_RCPP
}
// genetic_codes_by_index
List genetic_codes_by_index(int idx);
RcppExport SEXP _GCATR_genetic_codes_by_index(SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(genetic_codes_by_index(idx));
    return rcpp_result_gen;
END_RCPP
}
// genetic_codes_by_name
List genetic_codes_by_name(std::string name);
RcppExport SEXP _GCATR_genetic_codes_by_name(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(genetic_codes_by_name(name));
    return rcpp_result_gen;
END_RCPP
}
// seq_prepare_factor_gen_c3graph
Rcpp::List seq_prepare_factor_gen_c3graph(std::string seq, int word_length);
RcppExport SEXP _GCATR_seq_prepare_factor_gen_c3graph(SEXP seqSEXP, SEXP word_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type word_length(word_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_prepare_factor_gen_c3graph(seq, word_length));
    return rcpp_result_gen;
END_RCPP
}
// code_prepare_factor_gen_c3graph
Rcpp::List code_prepare_factor_gen_c3graph(StringVector code);
RcppExport SEXP _GCATR_code_prepare_factor_gen_c3graph(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_prepare_factor_gen_c3graph(code));
    return rcpp_result_gen;
END_RCPP
}
// code_prepare_factor_gen_graph
Rcpp::List code_prepare_factor_gen_graph(StringVector code, bool show_circles, bool show_longest_path);
RcppExport SEXP _GCATR_code_prepare_factor_gen_graph(SEXP codeSEXP, SEXP show_circlesSEXP, SEXP show_longest_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    Rcpp::traits::input_parameter< bool >::type show_circles(show_circlesSEXP);
    Rcpp::traits::input_parameter< bool >::type show_longest_path(show_longest_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(code_prepare_factor_gen_graph(code, show_circles, show_longest_path));
    return rcpp_result_gen;
END_RCPP
}
// seq_prepare_factor_gen_graph
Rcpp::List seq_prepare_factor_gen_graph(std::string seq, int word_length, bool show_circles, bool show_longest_path);
RcppExport SEXP _GCATR_seq_prepare_factor_gen_graph(SEXP seqSEXP, SEXP word_lengthSEXP, SEXP show_circlesSEXP, SEXP show_longest_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type word_length(word_lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type show_circles(show_circlesSEXP);
    Rcpp::traits::input_parameter< bool >::type show_longest_path(show_longest_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_prepare_factor_gen_graph(seq, word_length, show_circles, show_longest_path));
    return rcpp_result_gen;
END_RCPP
}
// code_prepare_factor_all_circles
Rcpp::List code_prepare_factor_all_circles(StringVector code);
RcppExport SEXP _GCATR_code_prepare_factor_all_circles(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_prepare_factor_all_circles(code));
    return rcpp_result_gen;
END_RCPP
}
// seq_prepare_factor_all_circles
Rcpp::List seq_prepare_factor_all_circles(std::string seq, int word_length);
RcppExport SEXP _GCATR_seq_prepare_factor_all_circles(SEXP seqSEXP, SEXP word_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type word_length(word_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_prepare_factor_all_circles(seq, word_length));
    return rcpp_result_gen;
END_RCPP
}
// code_prepare_factor_longest_path
Rcpp::List code_prepare_factor_longest_path(StringVector code);
RcppExport SEXP _GCATR_code_prepare_factor_longest_path(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_prepare_factor_longest_path(code));
    return rcpp_result_gen;
END_RCPP
}
// seq_prepare_factor_longest_path
Rcpp::List seq_prepare_factor_longest_path(std::string seq, int word_length);
RcppExport SEXP _GCATR_seq_prepare_factor_longest_path(SEXP seqSEXP, SEXP word_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type word_length(word_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_prepare_factor_longest_path(seq, word_length));
    return rcpp_result_gen;
END_RCPP
}
// code_check_if_circular
bool code_check_if_circular(StringVector code);
RcppExport SEXP _GCATR_code_check_if_circular(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_check_if_circular(code));
    return rcpp_result_gen;
END_RCPP
}
// code_check_if_cn_circular
bool code_check_if_cn_circular(StringVector code);
RcppExport SEXP _GCATR_code_check_if_cn_circular(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_check_if_cn_circular(code));
    return rcpp_result_gen;
END_RCPP
}
// code_check_if_comma_free
bool code_check_if_comma_free(StringVector code);
RcppExport SEXP _GCATR_code_check_if_comma_free(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_check_if_comma_free(code));
    return rcpp_result_gen;
END_RCPP
}
// code_check_if_self_complementary
bool code_check_if_self_complementary(StringVector code);
RcppExport SEXP _GCATR_code_check_if_self_complementary(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_check_if_self_complementary(code));
    return rcpp_result_gen;
END_RCPP
}
// code_get_acid
StringVector code_get_acid(StringVector code);
RcppExport SEXP _GCATR_code_get_acid(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_get_acid(code));
    return rcpp_result_gen;
END_RCPP
}
// code_get_one_longest_path_as_vector
StringVector code_get_one_longest_path_as_vector(StringVector code);
RcppExport SEXP _GCATR_code_get_one_longest_path_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_get_one_longest_path_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}
// code_get_all_longest_path_as_vector
Rcpp::List code_get_all_longest_path_as_vector(StringVector code);
RcppExport SEXP _GCATR_code_get_all_longest_path_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_get_all_longest_path_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}
// code_get_one_circle_as_vector
StringVector code_get_one_circle_as_vector(StringVector code);
RcppExport SEXP _GCATR_code_get_one_circle_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_get_one_circle_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}
// code_get_all_circle_as_vector
Rcpp::List code_get_all_circle_as_vector(StringVector code);
RcppExport SEXP _GCATR_code_get_all_circle_as_vector(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(code_get_all_circle_as_vector(code));
    return rcpp_result_gen;
END_RCPP
}
// get_dna_bases
Rcpp::StringVector get_dna_bases();
RcppExport SEXP _GCATR_get_dna_bases() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_dna_bases());
    return rcpp_result_gen;
END_RCPP
}
// get_rna_bases
Rcpp::StringVector get_rna_bases();
RcppExport SEXP _GCATR_get_rna_bases() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_rna_bases());
    return rcpp_result_gen;
END_RCPP
}
// find_amd_analysis_code_in_sequence
Rcpp::List find_amd_analysis_code_in_sequence(std::string seq, StringVector code);
RcppExport SEXP _GCATR_find_amd_analysis_code_in_sequence(SEXP seqSEXP, SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< StringVector >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_amd_analysis_code_in_sequence(seq, code));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GCATR_add_bda", (DL_FUNC) &_GCATR_add_bda, 6},
    {"_GCATR_code_start_bda", (DL_FUNC) &_GCATR_code_start_bda, 1},
    {"_GCATR_seq_start_bda", (DL_FUNC) &_GCATR_seq_start_bda, 2},
    {"_GCATR_run_bda", (DL_FUNC) &_GCATR_run_bda, 0},
    {"_GCATR_get_average_conductance_of_code", (DL_FUNC) &_GCATR_get_average_conductance_of_code, 2},
    {"_GCATR_get_max_conductance_of_code", (DL_FUNC) &_GCATR_get_max_conductance_of_code, 2},
    {"_GCATR_get_min_conductance_of_code", (DL_FUNC) &_GCATR_get_min_conductance_of_code, 2},
    {"_GCATR_get_average_conductance_of_codeidx", (DL_FUNC) &_GCATR_get_average_conductance_of_codeidx, 2},
    {"_GCATR_get_max_conductance_of_codeidx", (DL_FUNC) &_GCATR_get_max_conductance_of_codeidx, 2},
    {"_GCATR_get_min_conductance_of_codeidx", (DL_FUNC) &_GCATR_get_min_conductance_of_codeidx, 2},
    {"_GCATR_print_all_translation_table", (DL_FUNC) &_GCATR_print_all_translation_table, 0},
    {"_GCATR_genetic_codes_by_index", (DL_FUNC) &_GCATR_genetic_codes_by_index, 1},
    {"_GCATR_genetic_codes_by_name", (DL_FUNC) &_GCATR_genetic_codes_by_name, 1},
    {"_GCATR_seq_prepare_factor_gen_c3graph", (DL_FUNC) &_GCATR_seq_prepare_factor_gen_c3graph, 2},
    {"_GCATR_code_prepare_factor_gen_c3graph", (DL_FUNC) &_GCATR_code_prepare_factor_gen_c3graph, 1},
    {"_GCATR_code_prepare_factor_gen_graph", (DL_FUNC) &_GCATR_code_prepare_factor_gen_graph, 3},
    {"_GCATR_seq_prepare_factor_gen_graph", (DL_FUNC) &_GCATR_seq_prepare_factor_gen_graph, 4},
    {"_GCATR_code_prepare_factor_all_circles", (DL_FUNC) &_GCATR_code_prepare_factor_all_circles, 1},
    {"_GCATR_seq_prepare_factor_all_circles", (DL_FUNC) &_GCATR_seq_prepare_factor_all_circles, 2},
    {"_GCATR_code_prepare_factor_longest_path", (DL_FUNC) &_GCATR_code_prepare_factor_longest_path, 1},
    {"_GCATR_seq_prepare_factor_longest_path", (DL_FUNC) &_GCATR_seq_prepare_factor_longest_path, 2},
    {"_GCATR_code_check_if_circular", (DL_FUNC) &_GCATR_code_check_if_circular, 1},
    {"_GCATR_code_check_if_cn_circular", (DL_FUNC) &_GCATR_code_check_if_cn_circular, 1},
    {"_GCATR_code_check_if_comma_free", (DL_FUNC) &_GCATR_code_check_if_comma_free, 1},
    {"_GCATR_code_check_if_self_complementary", (DL_FUNC) &_GCATR_code_check_if_self_complementary, 1},
    {"_GCATR_code_get_acid", (DL_FUNC) &_GCATR_code_get_acid, 1},
    {"_GCATR_code_get_one_longest_path_as_vector", (DL_FUNC) &_GCATR_code_get_one_longest_path_as_vector, 1},
    {"_GCATR_code_get_all_longest_path_as_vector", (DL_FUNC) &_GCATR_code_get_all_longest_path_as_vector, 1},
    {"_GCATR_code_get_one_circle_as_vector", (DL_FUNC) &_GCATR_code_get_one_circle_as_vector, 1},
    {"_GCATR_code_get_all_circle_as_vector", (DL_FUNC) &_GCATR_code_get_all_circle_as_vector, 1},
    {"_GCATR_get_dna_bases", (DL_FUNC) &_GCATR_get_dna_bases, 0},
    {"_GCATR_get_rna_bases", (DL_FUNC) &_GCATR_get_rna_bases, 0},
    {"_GCATR_find_amd_analysis_code_in_sequence", (DL_FUNC) &_GCATR_find_amd_analysis_code_in_sequence, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_GCATR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
