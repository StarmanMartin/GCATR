% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BdaTools.R
\name{run_bda_as_matrix}
\alias{run_bda_as_matrix}
\title{Execute BDA procedure (only works for all codons).}
\usage{
run_bda_as_matrix(bda_obj)
}
\arguments{
\item{bda_obj}{BDA object (see \link{BDATools})}
}
\value{
Binary results as Matrix. For example:\cr "UUU -> 00" "UCU -> 10" "UAU -> 00" "UGU -> 10" \cr "UUC -> 00" "UCC -> 10" "UAC -> 00" "UGC -> 10" \cr  "UUA -> 01" "UCA -> 11" "UAA -> 01" "UGA -> 11" \cr  "UUG -> 01" "UCG -> 11" "UAG -> 01" "UGG -> 11" \cr  "CUU -> 00" "CCU -> 00" "CAU -> 00" "CGU -> 00" \cr  "CUC -> 00" "CCC -> 00" "CAC -> 00" "CGC -> 00" \cr  "CUA -> 01" "CCA -> 01" "CAA -> 01" "CGA -> 01" \cr  "CUG -> 01" "CCG -> 01" "CAG -> 01" "CGG -> 01" \cr  "AUU -> 00" "ACU -> 10" "AAU -> 00" "AGU -> 10" \cr  "AUC -> 00" "ACC -> 10" "AAC -> 00" "AGC -> 10" \cr  "AUA -> 00" "ACA -> 10" "AAA -> 00" "AGA -> 10" \cr  "AUG -> 00" "ACG -> 10" "AAG -> 00" "AGG -> 10" \cr  "GUU -> 11" "GCU -> 11" "GAU -> 11" "GGU -> 11" \cr  "GUC -> 11" "GCC -> 11" "GAC -> 11" "GGC -> 11" \cr  "GUA -> 11" "GCA -> 11" "GAA -> 11" "GGA -> 11" \cr  "GUG -> 11" "GCG -> 11" "GAG -> 11" "GGG -> 11"
}
\description{
This Function executes a binary dichotomic algorithm (BDA) procedure. It only works if the BDA procedure has been started by the \link{start_bda} function.
Each added binary BDA results one binary digit for each codon.
You can add multiple BDAs for one procedure. To add a rule, you need to start a BDA procedure first.
To do so you can either call \link{code_start_bda} or to start a procedure
for all RNA codons call \link{start_bda}.
To add a BDA simply Call \link{add_rule}. To execute the BDAs call \link{run_bda}.
A binary dichotomic algorithm generates a binary representation of a generic code. For more info on BDAs read:\cr
\emph{M.Gumbel, E.Fimmel, A.Danielli, L.Struengmann. On Models of the Genetic  Code generated by Binary Dichotomic Algorithms}
}
\examples{
bda_obj <- start_bda()
add_rule(1, 2, "C", "G", "A", "U")
add_rule(1, 3, "A", "G", "C", "U")
res <- run_bda_as_matrix(bda_obj)

}
\seealso{
[seq_start_bda()] for sequence, [add_rule] for all codons, [add_rule] add a BDA,
          [run_bda] for executing and run the BDAs
}
